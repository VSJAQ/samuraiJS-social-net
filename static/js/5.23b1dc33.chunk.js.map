{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/UserElement/UserElement.jsx","components/Dialogs/MessageElement/MessageElement.jsx","components/Dialogs/Dialogs.jsx","hoc/WithAuthRedirect.jsx","components/Dialogs/Dialogs-container.jsx"],"names":["module","exports","UserElement","props","pathLink","id","className","cl","User","ImgEl","src","ImgSrc","NameEl","to","name","MessageElement","Message","message","theMessageMaxLength","messageMaxLength","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","requiresMessage","Dialogs","UserElements","UserData","map","el","MessageElements","MessageData","DialogsWrapper","Users","Messages","values","addMessage","newMessageBody","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dispatch","newMessage","AddMessageActionCreator","Component","RedirectComponent","this","React"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,MAAQ,uBAAuB,KAAO,sBAAsB,MAAQ,uBAAuB,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCkBhQC,EAfK,SAACC,GACjB,IAAIC,EAAW,YAAcD,EAAME,GAEnC,OACI,yBAAKC,UAAWC,IAAGC,MACf,yBAAKF,UAAWC,IAAGE,OACf,yBAAKC,IAAKP,EAAMQ,UAEpB,yBAAKL,UAAWC,IAAGK,QACf,kBAAC,IAAD,CAASC,GAAIT,GAAWD,EAAMW,SCF/BC,EARQ,SAACZ,GACpB,OACI,yBAAKG,UAAWC,IAAGS,SACdb,EAAMc,U,iCC4BbC,EAAsBC,YAAiB,IAcvCC,EAAsBC,YAAU,CAACC,KAAM,qBAAjBD,EAZL,SAAClB,GACpB,OACI,0BAAMoB,SAAUpB,EAAMqB,cACtB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUb,KAAK,iBAC1Bc,YAAY,qBAAqBC,SAAU,CAACC,IAAiBZ,KAChE,6BACI,oDAQDa,EA1CC,SAAC5B,GAEb,IAAI6B,EAAe7B,EAAM4B,QAAQE,SAC5BC,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAa9B,GAAI8B,EAAG9B,GAAIS,KAAMqB,EAAGrB,KAAMH,OAAQwB,EAAGxB,YAE7DyB,EAAkBjC,EAAM4B,QAAQM,YAC/BH,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAgB9B,GAAI8B,EAAG9B,GAAIY,QAASkB,EAAGlB,aAMtD,OACI,yBAAKX,UAAWC,IAAG+B,gBACf,yBAAKhC,UAAWC,IAAGgC,OACdP,GAEL,yBAAK1B,UAAWC,IAAGiC,UACdJ,EACD,kBAAChB,EAAD,CAAqBG,SAXhB,SAACkB,GACdtC,EAAMuC,WAAWD,EAAOE,sB,gDCb5BC,EAA6B,SAACC,GAAD,MAAY,CACrCC,OAAQD,EAAME,KAAKD,S,OCoBZE,sBACXC,aAnBkB,SAACJ,GACnB,MAAO,CACHd,QAASc,EAAMd,YAIE,SAACmB,GACtB,MAAO,CACHR,WAAY,SAACS,GACTD,EAASE,YAAwBD,UDRb,SAACE,GAAe,IAEtCC,EAFqC,uKAInC,OAAKC,KAAKpD,MAAM2C,OACT,kBAACO,EAAcE,KAAKpD,OADI,kBAAC,IAAD,CAAUU,GAAG,eAJT,GAEX2C,IAAMH,WAStC,OAFqCJ,YAAQL,EAARK,CAAoCK,KCQ9DN,CAGZjB","file":"static/js/5.23b1dc33.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"DialogsWrapper\":\"Dialogs_DialogsWrapper__2ebwa\",\"Users\":\"Dialogs_Users__3ECbP\",\"User\":\"Dialogs_User__3Ke_4\",\"ImgEl\":\"Dialogs_ImgEl__lBtwi\",\"NameEl\":\"Dialogs_NameEl__5TLgP\",\"Active\":\"Dialogs_Active__2bfCp\",\"Messages\":\"Dialogs_Messages__2OiTt\",\"Message\":\"Dialogs_Message__TaJqo\"};","import React from 'react';\r\nimport cl from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst UserElement = (props) => {\r\n    let pathLink = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <div className={cl.User}>\r\n            <div className={cl.ImgEl}>\r\n                <img src={props.ImgSrc} />\r\n            </div>\r\n            <div className={cl.NameEl}>\r\n                <NavLink to={pathLink}>{props.name}</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserElement;","import React from 'react';\r\nimport cl from './../Dialogs.module.css';\r\n\r\nconst MessageElement = (props) => {\r\n    return (\r\n        <div className={cl.Message}>\r\n            {props.message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessageElement;","import React from 'react';\r\nimport cl from './Dialogs.module.css';\r\nimport UserElement from \"./UserElement/UserElement\";\r\nimport MessageElement from \"./MessageElement/MessageElement\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../FormsControls/FormControls\";\r\nimport {messageMaxLength, requiresMessage} from \"../../Utilits/validators/validators\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let UserElements = props.Dialogs.UserData\r\n        .map(el => <UserElement id={el.id} name={el.name} ImgSrc={el.ImgSrc}/>);\r\n\r\n    let MessageElements = props.Dialogs.MessageData\r\n        .map(el => <MessageElement id={el.id} message={el.message}/>);\r\n\r\n    let addMessage = (values) => {\r\n        props.addMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={cl.DialogsWrapper}>\r\n            <div className={cl.Users}>\r\n                {UserElements}\r\n            </div>\r\n            <div className={cl.Messages}>\r\n                {MessageElements}\r\n                <AddMessageFormRedux onSubmit={addMessage}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nconst theMessageMaxLength = messageMaxLength(60);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n        <Field component={TextArea} name='newMessageBody'\r\n               placeholder='Enter your message' validate={[requiresMessage, theMessageMaxLength]}/>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogMessageForm'}) (AddMessageForm)\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n        isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}","import React from 'react';\r\nimport {AddMessageActionCreator} from \"../../Redux/Dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        Dialogs: state.Dialogs\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (newMessage) => {\r\n            dispatch(AddMessageActionCreator(newMessage));\r\n        }\r\n    }\r\n}\r\n\r\n/*let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps) (AuthRedirectComponent);*/\r\n\r\nexport default compose (\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n) (Dialogs);"],"sourceRoot":""}